name: CI/CD Pipeline with Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DEPLOY_TARGET: '/var/www/your-project'
  DOCKER_IMAGE: 'meyudha/project-app'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP 8.2
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json
        tools: composer:v2

    - name: Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: composer-${{ hashFiles('composer.lock') }}
        restore-keys: composer-

    - name: Install Dependencies
      run: |
        echo "=== Installing PHP Dependencies ==="
        composer install --no-interaction --optimize-autoloader
        
        echo "=== Installing Node Dependencies ==="
        npm ci

    - name: Build Assets
      run: |
        echo "=== Building Assets ==="
        npm run build

    - name: Run PHP Tests
      continue-on-error: true
      run: |
        echo "=== Running PHP Tests ==="
        if [ -f "vendor/bin/phpunit" ]; then
          vendor/bin/phpunit
        else
          echo "PHPUnit not found, skipping PHP tests"
        fi

    - name: Run JavaScript Tests
      continue-on-error: true
      run: |
        echo "=== Running JavaScript Tests ==="
        if npm run --silent test 2>/dev/null; then
          npm test
        else
          echo "No npm test script found, skipping JS tests"
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub (Optional)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker Image
      run: |
        echo "=== Building Docker Image ==="
        docker build -t ${{ env.DOCKER_IMAGE }}:latest .
        echo "Docker image built successfully"

    - name: Deploy Container Locally
      run: |
        echo "=== Deploying Container ==="
        # Stop existing container if running
        docker stop project-app-container 2>/dev/null || true
        docker rm project-app-container 2>/dev/null || true
        
        # Run new container
        docker run -d --name project-app-container -p 5000:5000 ${{ env.DOCKER_IMAGE }}:latest
        
        # Wait a moment and check if container is running
        sleep 5
        if docker ps | grep -q project-app-container; then
          echo "✅ Docker container deployed successfully on port 5000"
          docker ps | grep project-app-container
        else
          echo "❌ Container failed to start"
          docker logs project-app-container
          exit 1
        fi

    - name: Push to Docker Hub (Optional)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "=== Pushing to Docker Hub ==="
        docker push ${{ env.DOCKER_IMAGE }}:latest

    - name: Pipeline Status
      if: always()
      run: |
        echo 'Pipeline execution completed'
        if [ "${{ job.status }}" == "success" ]; then
          echo '✅ Pipeline executed successfully!'
        else
          echo '❌ Pipeline failed. Check the logs above for details.'
        fi

---
# Alternative version using separate jobs for better performance
name: CI/CD Pipeline with Docker (Optimized)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DEPLOY_TARGET: '/var/www/your-project'
  DOCKER_IMAGE: 'meyudha/project-app'

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    
    container:
      image: php:8.2-cli
      options: --user root

    steps:
    - name: Setup Environment
      run: |
        echo "=== Setting up Environment ==="
        
        # Install required packages
        apt-get update
        apt-get install -y git unzip curl nodejs npm
        
        # Install Composer
        curl -sS https://getcomposer.org/installer | php
        mv composer.phar /usr/local/bin/composer
        chmod +x /usr/local/bin/composer
        
        # Verify installations
        php --version
        composer --version
        node --version
        npm --version

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: composer-${{ hashFiles('composer.lock') }}
        restore-keys: composer-

    - name: Cache Node modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: node-${{ hashFiles('package-lock.json') }}
        restore-keys: node-

    - name: Install Dependencies
      run: |
        echo "=== Installing PHP Dependencies ==="
        composer install --no-interaction --optimize-autoloader
        
        echo "=== Installing Node Dependencies ==="
        npm ci

    - name: Build Assets
      run: |
        echo "=== Building Assets ==="
        npm run build

    - name: Run PHP Tests
      continue-on-error: true
      run: |
        echo "=== Running PHP Tests ==="
        if [ -f "vendor/bin/phpunit" ]; then
          vendor/bin/phpunit
        else
          echo "PHPUnit not found, skipping PHP tests"
        fi

    - name: Run JavaScript Tests
      continue-on-error: true
      run: |
        echo "=== Running JavaScript Tests ==="
        if npm list --json | grep -q '"test"'; then
          npm test
        else
          echo "No npm test script found, skipping JS tests"
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: |
          vendor/
          node_modules/
          public/build/
        retention-days: 1

  deploy:
    needs: setup-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub (Optional)
      if: github.event_name == 'push'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Deploy Docker Container
      run: |
        echo "=== Building Docker Image ==="
        docker build -t ${{ env.DOCKER_IMAGE }}:latest .
        
        echo "=== Deploying Container ==="
        # Stop existing container if running
        docker stop project-app-container || true
        docker rm project-app-container || true
        
        # Run new container
        docker run -d --name project-app-container -p 5000:5000 ${{ env.DOCKER_IMAGE }}:latest
        
        echo "Docker container deployed successfully on port 5000"

    - name: Push to Docker Hub (Optional)
      if: github.event_name == 'push'
      run: |
        docker push ${{ env.DOCKER_IMAGE }}:latest

  cleanup:
    needs: [setup-and-test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Pipeline Status
      run: |
        echo 'Pipeline execution completed'
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo 'Pipeline executed successfully!'
        else
          echo 'Pipeline completed with issues. Check individual job logs.'
        fi
